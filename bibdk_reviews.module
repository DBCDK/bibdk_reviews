<?php


/** Implements hook_ting_openformat_getobject_params
 * @return array
 */
function bibdk_reviews_ting_openformat_getobject_params() {
  // example:
  return array(
    'relationData' => 'full',
  );
}

/** Get reviews with ids $ids
 * @param $ids
 * @return array An array of BibdkReview objects
 */
function _bibdk_reviews_getReview_from_webservice($ids){
  $params = array(
    'objectFormat' => 'docbook',
    'objectId' => $ids,
    'outputType' => 'xml',
  );

  $client = new ting_client_class();

  return $client->do_get_object($params);

}

/** Implements hook_thme
 * @return array
 */
function bibdk_reviews_theme(){
  return array(
    'bibdk-review-material-review' => array(
      'variables' => array(
        'titles' => array(),
        'sections' => array(),
        'authors' => array(),
      ),
      'template' => 'theme/bibdk_review_material_review',
    ),
  );
}


/** Converts result from webservice to BibdkReview Objects
 * @param $result xml
 * @return array
 */
function _bibdk_review_convert_result_to_bibdk_reviews($result){
  $dom = new DomDocument();

  if (!@$dom->loadXML($result)) {
    //watchdog('bibdk_reviews', t('BIBDK material review could not load response: %xml', array('%xml' => var_export($xml, TRUE))), array(), WATCHDOG_ERROR);
  }
  $xpath = new DomXPATH($dom);
  $xpath->registerNamespace('ns', 'http://oss.dbc.dk/ns/opensearch');

  $nodelist = $xpath->query('//ns:object');
  $reviews = array();
  foreach ($nodelist as $node) {
    $reviews[] = new BibdkReview($node->ownerDocument->saveXML($node));
  }
  return $reviews;
}

/** Create view for reviews
 * @param $review_ids
 * @return bool|string
 */
function bibdk_reviews_view($review_ids) {
  $xml = _bibdk_reviews_getReview_from_webservice($review_ids);
  $reviews = _bibdk_review_convert_result_to_bibdk_reviews($xml);

  // Render the view
  $elements = array();
  foreach ($reviews as $review) {
    $elements[] = _bibdk_review_render_array($review);
  }

  return count($elements) ? drupal_render($elements) : t('no_reviews_found');
}

/** Create renderarray for a single review
 * @param $review
 * @return array
 */
function _bibdk_review_render_array($review){
  return array(
    '#theme' => 'bibdk-review-material-review',
    '#titles' => implode(', ', $review->getTitle()),
    '#authors' => implode(', ', $review->getAuthor()),
    '#sections' => $review->getSections(),
  );
}


/** Form with a trigger button to load reviews for works
 *
 * @param $form
 * @param $form_state
 * @param $ids
 * @return array
 */
function bibdk_reviews_ajax_trigger_form($form, &$form_state, $ids) {
  if (!isset($ids) || count($ids) == 0) {
    $form['no_reviews'] = array(
      '#markup' => t('no_reviews_for_this_work'),
    );
  }
  else {
    $form['ajax_trigger'] = array(
      '#type' => 'submit',
      '#value' => 'get-reviews',
      '#ajax' => array(
        'callback' => 'bibdk_reviews_ajax_trigger_form_submit',
        'event' => 'click',
      ),
      '#ids' => $ids,
      '#attributes' => array(
        'class' => array('visuallyhidden ajax-trigger')
      ),
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'bibdk_reviews') . '/js/bibdk_reviews.js'),
      ),
    );

  }
  return $form;
}

/** Ajax submit callback. Returns rendered reviews
 * @param $form
 * @param $form_state
 * @return array
 */
function bibdk_reviews_ajax_trigger_form_submit($form, $form_state){
  $ids = $form['ajax_trigger']['#ids'];
  $commands = array(
    ajax_command_replace('#'.$form['#id'], bibdk_reviews_view($ids))
  );
  return array('#type' => 'ajax', '#commands' => $commands);

}

/** Implements hook_worktabs_items
 * @param $tabs
 * @param $entity
 * @return array
 */
function bibdk_reviews_worktabs_items($tabs, $entity) {
  $review_ids = $entity->getMaterialReview();
  $trigger_form = drupal_get_form('bibdk_reviews_ajax_trigger_form', $review_ids);
  $tabs['reviews']['material_review'] = array(
    'title' => t('material review'),
    'rendered' => drupal_render($trigger_form),
    'weight' => 0,
  );
  return $tabs;
}
